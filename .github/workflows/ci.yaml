name: Post-Commit Tasks

on:
  pull_request:
    types: [opened, reopened, edited, synchronize]
  push:
    branches: [main, bad]

env:
  JAVA_DIST: 'zulu'
  JAVA_VERSION: '21'
  REGISTRY: ghcr.io

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4.2.1
      - uses: actions/setup-python@v5.2.0
        with:
          python-version: '3.12'
      - uses: actions/setup-java@v4
        with:
          distribution: ${{ ENV.JAVA_DIST }}
          java-version: ${{ ENV.JAVA_VERSION }}
      - uses: pre-commit/action@v3.0.1
  build-and-upload-artifact:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      attestations: write
      id-token: write
    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Checkout GitHub Action
        uses: actions/checkout@v4.2.1
      - name: 'Build/Cache Image - temporal-java'
        uses: ./.github/actions/docker-build-cache
        with:
          subproject: orchestration/temporal-java
          image-name: temporal-java
      - name: 'Build/Cache Image - temporal-python'
        uses: ./.github/actions/docker-build-cache
        with:
          subproject: orchestration/temporal-python
          image-name: temporal-python
      - name: 'Build/Cache Image - pyspark-notebook'
        uses: ./.github/actions/docker-build-cache
        with:
          subproject: helm/jupyter/notebook
          image-name: pyspark-notebook
      - name: 'Build/Cache Image - explorer'
        uses: ./.github/actions/docker-build-cache
        with:
          subproject: explorer
          image-name: explorer
  unit-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4.2.1
      - uses: actions/setup-java@v4
        with:
          distribution: ${{ ENV.JAVA_DIST }}
          java-version: ${{ ENV.JAVA_VERSION }}
      - name: 'Unit tests: temporal-java'
        shell: bash
        run: cd orchestration/temporal-java && ./gradlew test
  deploy-and-test:
    runs-on: ubuntu-latest
    needs: [lint, build-and-upload-artifact, unit-test]
    env:
      KUBECONFIG: /etc/rancher/k3s/k3s.yaml
    steps:
      - uses: actions/checkout@v4.2.1
      - name: 'Prepare inventory.yaml'
        shell: bash
        run: |
          sed -e "s/HOSTNAME/$(hostname)/" -e "s/K3S_TOKEN/$(openssl rand -hex 16)/" -e "s:WORK_DIR:$(pwd):" \
            .github/ci_resources/inventory.yaml > ansible/inventory.yaml
      - name: 'ansible-galaxy dependencies'
        shell: bash
        run: cd ansible && sudo -E /opt/pipx_bin/ansible-galaxy install -r collections/requirements.yaml
      - name: 'Install k3s'
        shell: bash
        run: |
          cd ansible && sudo -E /opt/pipx_bin/ansible-playbook -v -i inventory.yaml --diff playbooks/k3s.yaml
      - name: 'Push image to k3s - temporal-java'
        uses: ./.github/actions/k3s-image-import
        with:
          subproject: orchestration/temporal-java
          image-name: temporal-java
      - name: 'Push image to k3s - temporal-python'
        uses: ./.github/actions/k3s-image-import
        with:
          subproject: orchestration/temporal-python
          image-name: temporal-python
      - name: 'Push image to k3s - explorer'
        uses: ./.github/actions/k3s-image-import
        with:
          subproject: explorer
          image-name: explorer
      - name: 'Install helm and helm diff'
        shell: bash
        run: cd ansible && sudo -E /opt/pipx_bin/ansible-playbook -v -i inventory.yaml --diff playbooks/helm.yaml
      - name: 'Install minio'
        shell: bash
        run: |
          cd ansible && sudo -E /opt/pipx_bin/ansible-playbook -v -i inventory.yaml --diff playbooks/minio.yaml
          sudo -E kubectl describe pod -l v1.min.io/tenant=minio-scout -n minio-scout
      - name: 'Install explorer'
        shell: bash
        run: |
          cd ansible && sudo -E /opt/pipx_bin/ansible-playbook -v -i inventory.yaml --diff playbooks/explorer.yaml
      - name: 'Install orchestrator'
        shell: bash
        run: |
          cd ansible && sudo -E /opt/pipx_bin/ansible-playbook -i inventory.yaml --diff playbooks/orchestrator.yaml
          sudo -E kubectl -n minio-scout wait --for=condition=ready --timeout=300s pod -l v1.min.io/tenant=minio-scout
          sudo -E kubectl -n temporal wait --for=condition=complete --timeout=300s job/temporal-schema-1
      - name: 'Launch temporal ingestion'
        shell: bash
        run: sudo -E bash .github/ci_resources/launch_temporal_extraction.sh
      - name: 'Run tests'
        shell: bash
        run: |
          cp .github/ci_resources/test_config_template.json tests/src/test/resources/config/local.json
          sed -i "s:WORK_DIR:$(pwd):" .github/ci_resources/tests-job.yaml
          sudo -E kubectl apply -f .github/ci_resources/tests-job.yaml
          sudo -E kubectl wait --for=condition=complete --timeout=300s job/ci-tests -n explorer &
          completion_pid=$!
          sudo -E kubectl wait --for=condition=failed --timeout=300s job/ci-tests -n explorer && exit 1 &
          failure_pid=$!
          wait -n $completion_pid $failure_pid
      - name: Test Logs
        shell: bash
        if: always()
        run: |
          sudo -E kubectl -n explorer logs job/ci-tests
      - name: Test Summary
        uses: test-summary/action@v2.4
        if: always()
        with:
          paths: 'tests/**/TEST-*.xml'
          show: 'fail, skip'
      - name: Logging (temporal-java)
        shell: bash
        if: always()
        run: |
          sudo -E kubectl -n orchestration-workers logs deployment/temporal-java
      - name: Logging (temporal-python)
        shell: bash
        if: always()
        run: |
          sudo -E kubectl -n orchestration-workers logs deployment/temporal-python
  publish:
    if: github.ref_name == 'main'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write
    needs: [deploy-and-test]
    steps:
      - name: Checkout GitHub Action
        uses: actions/checkout@v4.2.1
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3.3.0
        with:
          registry: ${{ ENV.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: 'Push Image - temporal-java'
        uses: ./.github/actions/docker-push
        with:
          image-name: temporal-java
      - name: 'Push Image - temporal-python'
        uses: ./.github/actions/docker-push
        with:
          image-name: temporal-python
      - name: 'Push Image - pyspark-notebook'
        uses: ./.github/actions/docker-push
        with:
          image-name: pyspark-notebook
      - name: 'Push Image - explorer'
        uses: ./.github/actions/docker-push
        with:
          image-name: explorer
