name: Ansible test

on:
  push:

env:
  JAVA_DIST: 'zulu'
  JAVA_VERSION: '21'
  REGISTRY: ghcr.io

jobs:
  build-and-upload-artifact:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      attestations: write
      id-token: write
    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Checkout GitHub Action
        uses: actions/checkout@v4.2.1
      - name: 'Build/Cache Image - temporal-java'
        uses: ./.github/actions/docker-build-cache
        with:
          subproject: orchestration/temporal-java
          image-name: temporal-java
      - name: 'Build/Cache Image - temporal-python'
        uses: ./.github/actions/docker-build-cache
        with:
          subproject: orchestration/temporal-python
          image-name: temporal-python
  ansible-install:
    runs-on: ubuntu-latest
    needs: [build-and-upload-artifact]
    steps:
      - uses: actions/checkout@v4.2.1
      - name: 'Prepare inventory.yaml'
        shell: bash
        run:
          cp .github/inventory.yaml ansible/
      - name: 'Install prerequisites'
        shell: bash
        run:
          sudo pip3 install kubernetes
      - name: 'ansible-galaxy dependencies'
        shell: bash
        run:
          cd ansible && sudo /opt/pipx_bin/ansible-galaxy install -r collections/requirements.yaml
      - name: 'Clone scout'
        shell: bash
        run:
          cd ansible && sudo /opt/pipx_bin/ansible-playbook -i inventory.yaml --diff playbooks/scout.yaml
      - name: 'Install k3s'
        shell: bash
        run: |
          cd ansible && sudo /opt/pipx_bin/ansible-playbook -i inventory.yaml --diff playbooks/k3s-cluster.yaml
      - name: 'Pull and Label Image - temporal-java'
        uses: ./.github/actions/docker-tag-local
        with:
          image-name: temporal-java
      - name: 'Pull and Label Image - temporal-python'
        uses: ./.github/actions/docker-tag-local
        with:
          image-name: temporal-python
      - name: 'Install helm and helm diff'
        shell: bash
        run:
          cd ansible && sudo /opt/pipx_bin/ansible-playbook -i inventory.yaml --diff playbooks/helm.yaml
      - name: 'Install minio'
        shell: bash
        run: |
          cd ansible && sudo /opt/pipx_bin/ansible-playbook -vvvv -i inventory.yaml --diff playbooks/minio.yaml
          sudo kubectl describe pod -l v1.min.io/tenant=minio-scout -n minio-scout
          sudo kubectl logs -l v1.min.io/tenant=minio-scout -n minio-scout
          sudo kubectl logs -l v1.min.io/tenant=minio-scout -n minio-scout -c minio
          sudo kubectl logs -l v1.min.io/tenant=minio-scout -n minio-scout -c validate-arguments
          sudo kubectl logs -l v1.min.io/tenant=minio-scout -n minio-scout -c sidecar
          sudo kubectl get pv
          sudo kubectl get pvc -n minio-scout
      - name: 'Install orchestrator'
        shell: bash
        run: |
          cd ansible && sudo /opt/pipx_bin/ansible-playbook -i inventory.yaml --diff playbooks/orchestrator.yaml || sudo kubectl -n temporal get events
          sudo kubectl -n minio-scout wait --for=condition=ready --timeout=300s pod -l v1.min.io/tenant=minio-scout
          sudo kubectl -n temporal wait --for=condition=complete --timeout=300s job/temporal-schema-1
      - name: 'Launch temporal ingestion'
        shell: bash
        run:
          sudo bash .github/launch_temporal_extraction.sh
      - uses: actions/setup-java@v4
        with:
          distribution: ${{ ENV.JAVA_DIST }}
          java-version: ${{ ENV.JAVA_VERSION }}
      - name: 'Run tests'
        shell: bash
        run: |
          minioIp=$(sudo kubectl get services/minio -n minio-scout -o json | jq '.status.loadBalancer.ingress[0].ip' -r)
          sed -i "s/\$IP/$minioIp/g" .github/test_config_template.json
          cp .github/test_config_template.json tests/src/test/resources/config/local.json
          cd tests
          ./gradlew test
      - name: Test Summary
        uses: test-summary/action@v2.4
        if: always()
        with:
          paths: "tests/**/TEST-*.xml"
          show: "fail, skip"
      - name: final debug
        shell: bash
        if: always()
        run: |
          sudo kubectl -n orchestration-workers logs deployment/temporal-java