name: Post-Commit Tasks

on:
  pull_request:
    types: [opened, reopened]
  push:
    branches:
      - main

env:
  JAVA_DIST: 'zulu'
  JAVA_VERSION: '21'
  REGISTRY: 'ghcr.io'
  DELTA_LAKE_PATH: 's3://synthetic/delta/hl7'
  HL7_OUTPUT_PATH: '/tmp/hl7'
  SCRATCH_PATH: '/tmp/scratch'

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4.2.1
      - name: Start a local k8s cluster
        uses: jupyterhub/action-k3s-helm@v4
        with:
          k3s-channel: latest
          traefik-enabled: false
          docker-enabled: true
      - name: Deploy helm chart to kubernetes
        shell: bash
        run: |
          helm repo add temporal https://go.temporal.io/helm-charts
          helm repo update temporal
          kubectl create ns temporal
          kubectl config set-context --current --namespace=temporal
          helm upgrade --install temporal temporal/temporal --set-json web.additionalEnv='[{"name": "TEMPORAL_CSRF_COOKIE_INSECURE", "value": "true"}]' --set prometheus.enabled=false --set grafana.enabled=false --set server.replicaCount=1 --set cassandra.config.cluster_size=1 --set elasticsearch.replicas=1 --set server.config.namespaces.create=true
      - name: Build images
        shell: bash
        run: |
          docker build -t local/temporal-java:latest orchestration/temporal-java/
          docker build -t local/temporal-python:latest orchestration/temporal-python/
      - name: Prepare Temporal
        shell: bash
        run: |
          kubectl create ns orchestration-workers
          kubectl -n orchestration-workers create secret generic s3-secret --from-literal=AWS_ACCESS_KEY_ID=admin --from-literal=AWS_SECRET_ACCESS_KEY=password
          kubectl -n orchestration-workers create configmap s3-env --from-literal=AWS_ENDPOINT_URL=http://minio.minio:9000 --from-literal=AWS_ALLOW_HTTP=true --from-literal=AWS_REGION=us-east-1
      - name: Launch temporal-java
        shell: bash
        run: >
          helm upgrade --install -n orchestration-workers temporal-java helm/orchestration/temporal-worker
          -f helm/orchestration/temporal-java.values.yaml
          --set volumes[0].name=hl7logs
          --set volumes[0].hostPath.path=${{ github.workspace }}/hl7logs
      - name: Launch temporal-python
        shell: bash
        run:
          helm upgrade --install -n orchestration-workers temporal-python helm/orchestration/temporal-worker -f helm/orchestration/temporal-python.values.yaml
      - name: Debug
        shell: bash
        run: |
          sleep 5s
          kubectl get events
          kubectl describe pods
      - name: Debug (orchestration-workers)
        shell: bash
        run: |
          kubectl get events -n orchestration-workers
          kubectl describe pods -n orchestration-workers
          kubectl -n orchestration-workers logs -l app.kubernetes.io/name=temporal-java
      - name: Wait for temporal startup
        shell: bash
        run: |
          kubectl wait --for=condition=complete --timeout=300s job/temporal-schema-1
      - name: Launch temporal workflow
        shell: bash
        run: |
          jsonresp=$(kubectl exec -i service/temporal-admintools -- temporal workflow start \
          --task-queue ingest-hl7-log \
          --type IngestHl7LogWorkflow \
          --input '{"deltaLakePath":"${{ ENV.DELTA_LAKE_PATH }}", "hl7OutputPath":"${{ ENV.HL7_OUTPUT_PATH }}", "scratchSpaceRootPath":"${{ ENV.SCRATCH_PATH }}", "logsRootPath": "/hl7logs", "date":"20080720"}' \
          --output json)
          workflowid=$(echo $jsonresp | jq '.workflowId' -r)
          runid=$(echo $jsonresp | jq '.runId' -r)
          echo "Parsed runId for workflow: ${runid}"
          echo "Parsed workflowId for workflow: ${workflowid}"
          sleep 30s
          echo "'show' results:"
          kubectl exec -i service/temporal-admintools -- temporal workflow show --run-id $runid --workflow-id $workflowid
          echo "'describe' results:"
          kubectl exec -i service/temporal-admintools -- temporal workflow describe --workflow-id $workflowid
          echo "logs?"
          kubectl -n orchestration-workers logs deployment/temporal-java
